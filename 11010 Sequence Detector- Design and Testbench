//11010 sequence detector - DESIGN 

module sequence_detector(clk,reset,data_in,out);
  input clk,reset;
  input data_in;
  output reg out;
  reg [2:0] ps,ns; 
  
  parameter s0 = 3'b000, s1=3'b001, s2=3'b010, s3=3'b011, s4=3'b100, s5=3'b101; 
  
  //next state block
  always@(data_in,ps)
    begin 
      case(ps)
        s0:if(data_in == 1'b1)
          ns = s1;
        else 
          ns = s0;
        s1:if(data_in ==1'b1)
          ns = s2;
        else 
          ns = s1;
        s2:if(data_in ==1'b0)
          ns = s3;
        else 
          ns = s0;
        s3:if(data_in ==1'b1)
          ns = s4;
        else 
          ns = s2;
        s4:if(data_in ==1'b0)
          ns = s5;
        else 
          ns = s2;
        //s5: ns = s0; 
        default : ns = s0;
      endcase 
    end
  
  //memory block 
  always@(posedge clk)
    begin 
      if(reset)
        ps = 0;
      else 
        ps = ns;
    end 
  
  //output block 
  always@(ps)
    begin 
      case(ps)
        s0 : out = 0;
        s1 : out = 0;
        s2 : out = 0;
        s3 : out = 0;
        s4 : out = 0;
        s5 : out = 1;
      endcase 
    end 
  
endmodule 

//TESTBENCH 

`timescale 1ns/1ps

module tb;
  reg clk, reset, data_in;
  wire out;
  
  sequence_detector DUT(clk,reset,data_in,out);
  
  initial begin
    clk = 0;
    reset = 0;
  end
  
  task reset;
    begin
      #1 reset = 1;
      #21 reset = 0;
    end
  endtask
  
  always #10 clk = ~clk;
  
  task data(input bit d);
    begin
      @(posedge clk)
      data_in = d;
    end
  endtask
  
  initial begin
    reset;
    data(1);
    data(1);
    data(0);
    data(1);
    data(0);
    data(0);
    #100 $stop;
  end
  
  initial begin
    $dumpfile("dump.vcd");
    $dumpvars(0, tb);
  end
endmodule
